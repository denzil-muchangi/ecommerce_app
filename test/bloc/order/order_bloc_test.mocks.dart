// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce_app/test/bloc/order/order_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:ecommerce_app/data/datasources/order_remote_data_source.dart'
    as _i2;
import 'package:ecommerce_app/data/repositories/order_repository_impl.dart'
    as _i4;
import 'package:ecommerce_app/domain/entities/address.dart' as _i7;
import 'package:ecommerce_app/domain/entities/cart_item.dart' as _i6;
import 'package:ecommerce_app/domain/entities/order.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrderRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.OrderRemoteDataSource {
  _FakeOrderRemoteDataSource_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOrder_1 extends _i1.SmartFake implements _i3.Order {
  _FakeOrder_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [OrderRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepositoryImpl extends _i1.Mock
    implements _i4.OrderRepositoryImpl {
  MockOrderRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.OrderRemoteDataSource get remoteDataSource =>
      (super.noSuchMethod(
            Invocation.getter(#remoteDataSource),
            returnValue: _FakeOrderRemoteDataSource_0(
              this,
              Invocation.getter(#remoteDataSource),
            ),
          )
          as _i2.OrderRemoteDataSource);

  @override
  _i5.Future<_i3.Order> placeOrder({
    required String? userId,
    required List<_i6.CartItem>? items,
    required _i7.Address? shippingAddress,
    required String? paymentMethod,
    required double? subtotal,
    required double? tax,
    required double? shipping,
    required double? total,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#placeOrder, [], {
              #userId: userId,
              #items: items,
              #shippingAddress: shippingAddress,
              #paymentMethod: paymentMethod,
              #subtotal: subtotal,
              #tax: tax,
              #shipping: shipping,
              #total: total,
            }),
            returnValue: _i5.Future<_i3.Order>.value(
              _FakeOrder_1(
                this,
                Invocation.method(#placeOrder, [], {
                  #userId: userId,
                  #items: items,
                  #shippingAddress: shippingAddress,
                  #paymentMethod: paymentMethod,
                  #subtotal: subtotal,
                  #tax: tax,
                  #shipping: shipping,
                  #total: total,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Order>);

  @override
  _i5.Future<List<_i3.Order>> getOrderHistory(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getOrderHistory, [userId]),
            returnValue: _i5.Future<List<_i3.Order>>.value(<_i3.Order>[]),
          )
          as _i5.Future<List<_i3.Order>>);

  @override
  _i5.Future<_i3.Order> getOrderById(String? orderId) =>
      (super.noSuchMethod(
            Invocation.method(#getOrderById, [orderId]),
            returnValue: _i5.Future<_i3.Order>.value(
              _FakeOrder_1(this, Invocation.method(#getOrderById, [orderId])),
            ),
          )
          as _i5.Future<_i3.Order>);
}
